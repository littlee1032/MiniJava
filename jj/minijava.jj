PARSER_BEGIN(MiniParser)
    class MiniParser {}
PARSER_END(MiniParser)

SKIP:{" " | "\r" | "\n" | "\r\n"}
TOKEN:{
<INT:"int">
|<BOOL:"boolean">
|<NEW:"new">
|<ELSE:"else">
|<TRUE:"true">
|<THIS:"this">
|<CLASS:"class">
|<PUBLIC:"public">
|<RETURN:"return">
|<EXTENDS:"extends">
}
TOKEN:{<IDEN:<CHARACTER>(<CHARACTER>|<DIGIT>|"_")*>}
TOKEN:{<#CHARACTER:["a"-"z","A"-"Z"]>}
TOKEN:{<DIGIT:["0"-"9"]>}
TOKEN:{<AND:"&&">}
TOKEN:{<LESS:"<">}
TOKEN:{<PLUS:"+">}
TOKEN:{<MINUS:"-">}
TOKEN:{<TIMES:"*">}
TOKEN:{<#OTHER:~[]>}
TOKEN:{<#RETCH:"\r"|"\n"|"\r\n">}

TOKEN:{<COMMENT:"//"(<OTHER>)*<RETCH> | "/*"(<OTHER>)*"*/">}

TOKEN:{<COMMA:";">}

void Prog():
{}
{MainClass() (ClassDecl())* }

void MainClass():
{}
{"class" <IDEN> "{" "public static void main" "(String[]" <IDEN> ")" "{" Statement() "}""}"}

void ClassDecl():
{}
{LOOKAHEAD(3) "class" <IDEN> "{"(VarDecl())* (MethodDecl())*"}"
|"class" <IDEN> "extends" <IDEN> "{"(VarDecl())* (MethodDecl())*"}"}

void VarDecl():
{}
{Type() <IDEN> <COMMA>}

void MethodDecl():
{}
{<PUBLIC> Type() <IDEN> "("FormalList()")" "{"(LOOKAHEAD(2) VarDecl())* (Statement())* <RETURN> Exp() <COMMA> "}"}

void FormalList():
{}
{Type() <IDEN> (FormalRest())*}

void FormalRest():
{}
{"," Type() <IDEN>}

void Type():
{}
{"int []"
|<BOOL>
|<INT>
|<IDEN>
}

void Statement():
{}
{"{"(Statement())*"}"
|"if (" Exp() ")" Statement() "else" Statement()
|"while (" Exp() ")" Statement()
|"System.out.println(" Exp() ")" <COMMA>
|LOOKAHEAD(2) <IDEN> "=" Exp() <COMMA>
|<IDEN>"["Exp()"] =" Exp() <COMMA>}

void op():
{}
{<AND>
|<LESS>
|<PLUS>
|<MINUS>
|<TIMES>}

void Exp():
{}
{(<DIGIT>)+ (LOOKAHEAD(1) ExpPrime())?
|<TRUE> (LOOKAHEAD(1) ExpPrime())?
|<ELSE> (LOOKAHEAD(1) ExpPrime())?
|<IDEN> (LOOKAHEAD(1) ExpPrime())?
|<THIS> (LOOKAHEAD(1) ExpPrime())?
|"new int ["Exp()"]" (LOOKAHEAD(1) ExpPrime())?
|"new" <IDEN> "()" (LOOKAHEAD(1) ExpPrime())?
|"!"Exp() (LOOKAHEAD(1) ExpPrime())?
|"("Exp()")" (LOOKAHEAD(1) ExpPrime())?}

void ExpPrime():
{}
{op() Exp() (LOOKAHEAD(1) ExpPrime())?
|"["Exp()"]" (LOOKAHEAD(1) ExpPrime())?
|".length" (LOOKAHEAD(1) ExpPrime())?
|"." <IDEN> "("ExpList()")" (LOOKAHEAD(1) ExpPrime())?
}

void ExpList():
{}
{Exp() (ExpRest())*}

void ExpRest():
{}
{" ," Exp()}
