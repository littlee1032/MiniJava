//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(MiniParser)
import syntaxtree.*;
import java.util.Vector;


class MiniParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MiniParser)

SKIP :
{
   " "
   | "\r"
   | "\n"
   | "\r\n"
}

TOKEN :
{
   <INT: "int">
   | <BOOL: "boolean">
   | <NEW: "new">
   | <ELSE: "else">
   | <TRUE: "true">
   | <THIS: "this">
   | <CLASS: "class">
   | <PUBLIC: "public">
   | <RETURN: "return">
   | <EXTENDS: "extends">
}

TOKEN :
{
   <IDEN: <CHARACTER> (<CHARACTER> | <DIGIT> | "_")*>
}

TOKEN :
{
   <#CHARACTER: ["a"-"z", "A"-"Z"]>
}

TOKEN :
{
   <DIGIT: ["0"-"9"]>
}

TOKEN :
{
   <AND: "&&">
}

TOKEN :
{
   <LESS: "<">
}

TOKEN :
{
   <PLUS: "+">
}

TOKEN :
{
   <MINUS: "-">
}

TOKEN :
{
   <TIMES: "*">
}

TOKEN :
{
   <#OTHER: ~[]>
}

TOKEN :
{
   <#RETCH: "\r" | "\n" | "\r\n">
}

TOKEN :
{
   <COMMENT: "//" (<OTHER>)* <RETCH> | "/*" (<OTHER>)* "*/">
}

TOKEN :
{
   <COMMA: ";">
}

Prog Prog() :
{
   MainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   ClassDecl n2;

   
}
{
   n0=MainClass()
   (
      n2=ClassDecl()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Prog(n0,n1); }
}

MainClass MainClass() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   Statement n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDEN> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="{" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="public static void main" { n6 = JTBToolkit.makeNodeToken(n7); }
   n9="(String[]" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<IDEN> { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=")" { n12 = JTBToolkit.makeNodeToken(n13); }
   n15="{" { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=Statement()
   n18="}" { n17 = JTBToolkit.makeNodeToken(n18); }
   n20="}" { n19 = JTBToolkit.makeNodeToken(n20); }
   
   { return new MainClass(n0,n2,n4,n6,n8,n10,n12,n14,n16,n17,n19); }
}

ClassDecl ClassDecl() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   VarDecl n9;
   NodeListOptional n10 = new NodeListOptional();
   MethodDecl n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeListOptional n25 = new NodeListOptional();
   VarDecl n26;
   NodeListOptional n27 = new NodeListOptional();
   MethodDecl n28;
   NodeToken n29;
   Token n30;

   
}
{
   (
      LOOKAHEAD(3)
      { n1 = new NodeSequence(7); }
      n3="class" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<IDEN> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n7="{" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      (
         n9=VarDecl()
         { n8.addNode(n9); }
      )*
      { n8.nodes.trimToSize(); }
      { n1.addNode(n8); }
      (
         n11=MethodDecl()
         { n10.addNode(n11); }
      )*
      { n10.nodes.trimToSize(); }
      { n1.addNode(n10); }
      n13="}" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n1.addNode(n12); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n14 = new NodeSequence(8); }
      n16="class" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n18=<IDEN> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n14.addNode(n17); }
      n20="extends" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n14.addNode(n19); }
      n22=<IDEN> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n14.addNode(n21); }
      n24="{" { n23 = JTBToolkit.makeNodeToken(n24); }
      { n14.addNode(n23); }
      (
         n26=VarDecl()
         { n25.addNode(n26); }
      )*
      { n25.nodes.trimToSize(); }
      { n14.addNode(n25); }
      (
         n28=MethodDecl()
         { n27.addNode(n28); }
      )*
      { n27.nodes.trimToSize(); }
      { n14.addNode(n27); }
      n30="}" { n29 = JTBToolkit.makeNodeToken(n30); }
      { n14.addNode(n29); }
      { n0 = new NodeChoice(n14, 1); }
   )
   
   { return new ClassDecl(n0); }
}

VarDecl VarDecl() :
{
   Type n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=Type()
   n2=<IDEN> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new VarDecl(n0,n1,n3); }
}

MethodDecl MethodDecl() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   FormalList n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   VarDecl n13;
   NodeListOptional n14 = new NodeListOptional();
   Statement n15;
   NodeToken n16;
   Token n17;
   Exp n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   n1=<PUBLIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n4=<IDEN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=FormalList()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11="{" { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      LOOKAHEAD(2)
      n13=VarDecl()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   (
      n15=Statement()
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   n17=<RETURN> { n16 = JTBToolkit.makeNodeToken(n17); }
   n18=Exp()
   n20=<COMMA> { n19 = JTBToolkit.makeNodeToken(n20); }
   n22="}" { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new MethodDecl(n0,n2,n3,n5,n7,n8,n10,n12,n14,n16,n18,n19,n21); }
}

FormalList FormalList() :
{
   Type n0;
   NodeToken n1;
   Token n2;
   NodeListOptional n3 = new NodeListOptional();
   FormalRest n4;

   
}
{
   n0=Type()
   n2=<IDEN> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=FormalRest()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new FormalList(n0,n1,n3); }
}

FormalRest FormalRest() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n4=<IDEN> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new FormalRest(n0,n2,n3); }
}

Type Type() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2="int []" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<BOOL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<INT> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<IDEN> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new Type(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   Statement n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   Exp n11;
   NodeToken n12;
   Token n13;
   Statement n14;
   NodeToken n15;
   Token n16;
   Statement n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   Exp n21;
   NodeToken n22;
   Token n23;
   Statement n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   Exp n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   Exp n38;
   NodeToken n39;
   Token n40;
   NodeSequence n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   Exp n46;
   NodeToken n47;
   Token n48;
   Exp n49;
   NodeToken n50;
   Token n51;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3="{" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n5=Statement()
         { n4.addNode(n5); }
      )*
      { n4.nodes.trimToSize(); }
      { n1.addNode(n4); }
      n7="}" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(6); }
      n10="if (" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n11=Exp()
      { n8.addNode(n11); }
      n13=")" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n8.addNode(n12); }
      n14=Statement()
      { n8.addNode(n14); }
      n16="else" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n8.addNode(n15); }
      n17=Statement()
      { n8.addNode(n17); }
      { n0 = new NodeChoice(n8, 1); }
   |
      { n18 = new NodeSequence(4); }
      n20="while (" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      n21=Exp()
      { n18.addNode(n21); }
      n23=")" { n22 = JTBToolkit.makeNodeToken(n23); }
      { n18.addNode(n22); }
      n24=Statement()
      { n18.addNode(n24); }
      { n0 = new NodeChoice(n18, 2); }
   |
      { n25 = new NodeSequence(4); }
      n27="System.out.println(" { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
      n28=Exp()
      { n25.addNode(n28); }
      n30=")" { n29 = JTBToolkit.makeNodeToken(n30); }
      { n25.addNode(n29); }
      n32=<COMMA> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n25.addNode(n31); }
      { n0 = new NodeChoice(n25, 3); }
   |
      LOOKAHEAD(2)
      { n33 = new NodeSequence(5); }
      n35=<IDEN> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n33.addNode(n34); }
      n37="=" { n36 = JTBToolkit.makeNodeToken(n37); }
      { n33.addNode(n36); }
      n38=Exp()
      { n33.addNode(n38); }
      n40=<COMMA> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n33.addNode(n39); }
      { n0 = new NodeChoice(n33, 4); }
   |
      { n41 = new NodeSequence(6); }
      n43=<IDEN> { n42 = JTBToolkit.makeNodeToken(n43); }
      { n41.addNode(n42); }
      n45="[" { n44 = JTBToolkit.makeNodeToken(n45); }
      { n41.addNode(n44); }
      n46=Exp()
      { n41.addNode(n46); }
      n48="] =" { n47 = JTBToolkit.makeNodeToken(n48); }
      { n41.addNode(n47); }
      n49=Exp()
      { n41.addNode(n49); }
      n51=<COMMA> { n50 = JTBToolkit.makeNodeToken(n51); }
      { n41.addNode(n50); }
      { n0 = new NodeChoice(n41, 5); }
   )
   
   { return new Statement(n0); }
}

op op() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2=<AND> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<LESS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<PLUS> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<MINUS> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<TIMES> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new op(n0); }
}

Exp Exp() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeList n2 = new NodeList();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   ExpPrime n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   ExpPrime n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15 = new NodeOptional();
   ExpPrime n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20 = new NodeOptional();
   ExpPrime n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25 = new NodeOptional();
   ExpPrime n26;
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   Exp n30;
   NodeToken n31;
   Token n32;
   NodeOptional n33 = new NodeOptional();
   ExpPrime n34;
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   NodeOptional n42 = new NodeOptional();
   ExpPrime n43;
   NodeSequence n44;
   NodeToken n45;
   Token n46;
   Exp n47;
   NodeOptional n48 = new NodeOptional();
   ExpPrime n49;
   NodeSequence n50;
   NodeToken n51;
   Token n52;
   Exp n53;
   NodeToken n54;
   Token n55;
   NodeOptional n56 = new NodeOptional();
   ExpPrime n57;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      (
         n4=<DIGIT> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
      )+
      { n2.nodes.trimToSize(); }
      { n1.addNode(n2); }
      (
         LOOKAHEAD(1)
         n6=ExpPrime()
         { n5.addNode(n6); }
      )?
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n7 = new NodeSequence(2); }
      n9=<TRUE> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      (
         LOOKAHEAD(1)
         n11=ExpPrime()
         { n10.addNode(n11); }
      )?
      { n7.addNode(n10); }
      { n0 = new NodeChoice(n7, 1); }
   |
      { n12 = new NodeSequence(2); }
      n14=<ELSE> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      (
         LOOKAHEAD(1)
         n16=ExpPrime()
         { n15.addNode(n16); }
      )?
      { n12.addNode(n15); }
      { n0 = new NodeChoice(n12, 2); }
   |
      { n17 = new NodeSequence(2); }
      n19=<IDEN> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      (
         LOOKAHEAD(1)
         n21=ExpPrime()
         { n20.addNode(n21); }
      )?
      { n17.addNode(n20); }
      { n0 = new NodeChoice(n17, 3); }
   |
      { n22 = new NodeSequence(2); }
      n24=<THIS> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      (
         LOOKAHEAD(1)
         n26=ExpPrime()
         { n25.addNode(n26); }
      )?
      { n22.addNode(n25); }
      { n0 = new NodeChoice(n22, 4); }
   |
      { n27 = new NodeSequence(4); }
      n29="new int [" { n28 = JTBToolkit.makeNodeToken(n29); }
      { n27.addNode(n28); }
      n30=Exp()
      { n27.addNode(n30); }
      n32="]" { n31 = JTBToolkit.makeNodeToken(n32); }
      { n27.addNode(n31); }
      (
         LOOKAHEAD(1)
         n34=ExpPrime()
         { n33.addNode(n34); }
      )?
      { n27.addNode(n33); }
      { n0 = new NodeChoice(n27, 5); }
   |
      { n35 = new NodeSequence(4); }
      n37="new" { n36 = JTBToolkit.makeNodeToken(n37); }
      { n35.addNode(n36); }
      n39=<IDEN> { n38 = JTBToolkit.makeNodeToken(n39); }
      { n35.addNode(n38); }
      n41="()" { n40 = JTBToolkit.makeNodeToken(n41); }
      { n35.addNode(n40); }
      (
         LOOKAHEAD(1)
         n43=ExpPrime()
         { n42.addNode(n43); }
      )?
      { n35.addNode(n42); }
      { n0 = new NodeChoice(n35, 6); }
   |
      { n44 = new NodeSequence(3); }
      n46="!" { n45 = JTBToolkit.makeNodeToken(n46); }
      { n44.addNode(n45); }
      n47=Exp()
      { n44.addNode(n47); }
      (
         LOOKAHEAD(1)
         n49=ExpPrime()
         { n48.addNode(n49); }
      )?
      { n44.addNode(n48); }
      { n0 = new NodeChoice(n44, 7); }
   |
      { n50 = new NodeSequence(4); }
      n52="(" { n51 = JTBToolkit.makeNodeToken(n52); }
      { n50.addNode(n51); }
      n53=Exp()
      { n50.addNode(n53); }
      n55=")" { n54 = JTBToolkit.makeNodeToken(n55); }
      { n50.addNode(n54); }
      (
         LOOKAHEAD(1)
         n57=ExpPrime()
         { n56.addNode(n57); }
      )?
      { n50.addNode(n56); }
      { n0 = new NodeChoice(n50, 8); }
   )
   
   { return new Exp(n0); }
}

ExpPrime ExpPrime() :
{
   NodeChoice n0;
   NodeSequence n1;
   op n2;
   Exp n3;
   NodeOptional n4 = new NodeOptional();
   ExpPrime n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Exp n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   ExpPrime n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   ExpPrime n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   ExpList n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29 = new NodeOptional();
   ExpPrime n30;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n2=op()
      { n1.addNode(n2); }
      n3=Exp()
      { n1.addNode(n3); }
      (
         LOOKAHEAD(1)
         n5=ExpPrime()
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n6 = new NodeSequence(4); }
      n8="[" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Exp()
      { n6.addNode(n9); }
      n11="]" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      (
         LOOKAHEAD(1)
         n13=ExpPrime()
         { n12.addNode(n13); }
      )?
      { n6.addNode(n12); }
      { n0 = new NodeChoice(n6, 1); }
   |
      { n14 = new NodeSequence(2); }
      n16=".length" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      (
         LOOKAHEAD(1)
         n18=ExpPrime()
         { n17.addNode(n18); }
      )?
      { n14.addNode(n17); }
      { n0 = new NodeChoice(n14, 2); }
   |
      { n19 = new NodeSequence(6); }
      n21="." { n20 = JTBToolkit.makeNodeToken(n21); }
      { n19.addNode(n20); }
      n23=<IDEN> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n19.addNode(n22); }
      n25="(" { n24 = JTBToolkit.makeNodeToken(n25); }
      { n19.addNode(n24); }
      n26=ExpList()
      { n19.addNode(n26); }
      n28=")" { n27 = JTBToolkit.makeNodeToken(n28); }
      { n19.addNode(n27); }
      (
         LOOKAHEAD(1)
         n30=ExpPrime()
         { n29.addNode(n30); }
      )?
      { n19.addNode(n29); }
      { n0 = new NodeChoice(n19, 3); }
   )
   
   { return new ExpPrime(n0); }
}

ExpList ExpList() :
{
   Exp n0;
   NodeListOptional n1 = new NodeListOptional();
   ExpRest n2;

   
}
{
   n0=Exp()
   (
      n2=ExpRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExpList(n0,n1); }
}

ExpRest ExpRest() :
{
   NodeToken n0;
   Token n1;
   Exp n2;

   
}
{
   n1=" ," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Exp()
   
   { return new ExpRest(n0,n2); }
}
